import { CommonModule } from '@angular/common';
import { Component, ElementRef, ChangeDetectorRef, Input, NgModule } from '@angular/core';
import Swiper from 'swiper';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = function (a0) { return { "swiper-container": a0 }; };
const _c1 = ["*"];
class SwiperComponent {
    /**
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     */
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    /**
     * @return {?}
     */
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
}
SwiperComponent.ɵfac = function SwiperComponent_Factory(t) { return new (t || SwiperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
SwiperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwiperComponent, selectors: [["swiper"]], inputs: { initialize: "initialize", config: "config" }, ngContentSelectors: _c1, decls: 2, vars: 3, consts: [[3, "ngClass"]], template: function SwiperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c0, (ctx.config == null ? null : ctx.config.containerModifierClass) === undefined));
    } }, directives: [ɵngcc1.NgClass], styles: ["[_nghost-%COMP%]{display:block}.swiper-container[_ngcontent-%COMP%]{width:100%;height:100%}"] });
/** @nocollapse */
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
SwiperComponent.propDecorators = {
    config: [{ type: Input }],
    initialize: [{ type: Input, args: ['initialize',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwiperComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'swiper',
                template: "<div\n  [ngClass]=\"{\n    'swiper-container': config?.containerModifierClass === undefined\n  }\"\n>\n  <ng-content></ng-content>\n</div>\n",
                styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { initialize: [{
            type: Input,
            args: ['initialize']
        }], config: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Angular2UsefulSwiperModule {
}
Angular2UsefulSwiperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Angular2UsefulSwiperModule });
Angular2UsefulSwiperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Angular2UsefulSwiperModule_Factory(t) { return new (t || Angular2UsefulSwiperModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Angular2UsefulSwiperModule, { declarations: function () { return [SwiperComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwiperComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angular2UsefulSwiperModule, [{
        type: NgModule,
        args: [{
                declarations: [SwiperComponent],
                imports: [CommonModule],
                exports: [SwiperComponent]
            }]
    }], null, null); })();

export { Angular2UsefulSwiperModule, SwiperComponent };

//# sourceMappingURL=angular2-useful-swiper.js.map