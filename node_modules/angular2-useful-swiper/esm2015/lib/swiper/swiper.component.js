/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import Swiper from 'swiper';
export class SwiperComponent {
    /**
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     */
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    /**
     * @return {?}
     */
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
}
SwiperComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'swiper',
                template: "<div\n  [ngClass]=\"{\n    'swiper-container': config?.containerModifierClass === undefined\n  }\"\n>\n  <ng-content></ng-content>\n</div>\n",
                styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
SwiperComponent.propDecorators = {
    config: [{ type: Input }],
    initialize: [{ type: Input, args: ['initialize',] }]
};
if (false) {
    /** @type {?} */
    SwiperComponent.prototype.config;
    /** @type {?} */
    SwiperComponent.prototype.swiper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.swiperWrapper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.slideCount;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.shouldInitialize;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXVzZWZ1bC1zd2lwZXIvIiwic291cmNlcyI6WyJsaWIvc3dpcGVyL3N3aXBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFHTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxNQUF5QixNQUFNLFFBQVEsQ0FBQztBQVEvQyxNQUFNLE9BQU8sZUFBZTs7Ozs7SUFjMUIsWUFDVSxVQUFzQixFQUN0QixpQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBTnRDLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUNwQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFLN0IsQ0FBQzs7Ozs7SUFkSixJQUF5QixVQUFVLENBQUMsS0FBYztRQUNoRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQzs7OztJQWNELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtJQUNILENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsbURBQW1EO1lBQ25ELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFO2dCQUMvQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FDOUQsaUJBQWlCLENBQ2xCLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO2dCQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQzNELElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztnQkFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDeEM7WUFFRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtRQUVELElBQ0UsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUN4RDtZQUNBLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztZQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7O1lBOURGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLHdKQUFzQzs7YUFFdkM7Ozs7WUFWQyxVQUFVO1lBRlYsaUJBQWlCOzs7cUJBZWhCLEtBQUs7eUJBQ0wsS0FBSyxTQUFDLFlBQVk7Ozs7SUFEbkIsaUNBQStCOztJQUsvQixpQ0FBWTs7Ozs7SUFFWix3Q0FBMkI7Ozs7O0lBQzNCLHFDQUF1Qjs7Ozs7SUFDdkIsc0NBQTRCOzs7OztJQUM1QiwyQ0FBZ0M7Ozs7O0lBRzlCLHFDQUE4Qjs7Ozs7SUFDOUIsNENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dpcGVyLCB7IFN3aXBlck9wdGlvbnMgfSBmcm9tICdzd2lwZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdzd2lwZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc3dpcGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3dpcGVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTd2lwZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0IHtcbiAgLy8gYWRkIGFsbCB0aGUgb3B0aW9ucyBhcyBvcHRpb25hbCBzZXR0aW5ncyBhbmQgdXNlIHRoZW0gdG8gY3JlYXRlIGFuIG9wdGlvbnMgb2JqZWN0XG4gIEBJbnB1dCgpIGNvbmZpZzogU3dpcGVyT3B0aW9ucztcbiAgQElucHV0KCdpbml0aWFsaXplJykgc2V0IGluaXRpYWxpemUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSB0aGlzLmluaXRpYWxpemVkID8gZmFsc2UgOiB2YWx1ZTtcbiAgfVxuXG4gIHN3aXBlcjogYW55O1xuXG4gIHByaXZhdGUgc3dpcGVyV3JhcHBlcjogYW55O1xuICBwcml2YXRlIHNsaWRlQ291bnQgPSAwO1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgc2hvdWxkSW5pdGlhbGl6ZSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSkge1xuICAgICAgdGhpcy5zZXR1cCgpO1xuICAgIH1cbiAgfVxuXG4gIHNldHVwKCkge1xuICAgIGlmICghdGhpcy5zd2lwZXIpIHtcbiAgICAgIC8vIGlmIHJlbmRlcmVkIG9uIHNlcnZlciBxdWVyeVNlbGVjdG9yIGlzIHVuZGVmaW5lZFxuICAgICAgaWYgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5zd2lwZXJXcmFwcGVyID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAnLnN3aXBlci13cmFwcGVyJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLnNsaWRlQ291bnQgPSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnQ7XG4gICAgICAgIHRoaXMuc3dpcGVyID0gbmV3IFN3aXBlcihcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzd2lwZXIgPiBkaXYnKSxcbiAgICAgICAgICB0aGlzLmNvbmZpZ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zaG91bGRJbml0aWFsaXplID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemUpIHtcbiAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnN3aXBlcldyYXBwZXIgJiZcbiAgICAgIHRoaXMuc2xpZGVDb3VudCAhPT0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50XG4gICAgKSB7XG4gICAgICB0aGlzLnNsaWRlQ291bnQgPSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnQ7XG4gICAgICB0aGlzLnN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==