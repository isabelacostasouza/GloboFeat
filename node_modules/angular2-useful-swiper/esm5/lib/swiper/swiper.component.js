/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input } from '@angular/core';
import Swiper from 'swiper';
var SwiperComponent = /** @class */ (function () {
    function SwiperComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    Object.defineProperty(SwiperComponent.prototype, "initialize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.shouldInitialize = this.initialized ? false : value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.shouldInitialize) {
            this.setup();
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.setup = /**
     * @return {?}
     */
    function () {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    };
    SwiperComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'swiper',
                    template: "<div\n  [ngClass]=\"{\n    'swiper-container': config?.containerModifierClass === undefined\n  }\"\n>\n  <ng-content></ng-content>\n</div>\n",
                    styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    SwiperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    SwiperComponent.propDecorators = {
        config: [{ type: Input }],
        initialize: [{ type: Input, args: ['initialize',] }]
    };
    return SwiperComponent;
}());
export { SwiperComponent };
if (false) {
    /** @type {?} */
    SwiperComponent.prototype.config;
    /** @type {?} */
    SwiperComponent.prototype.swiper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.swiperWrapper;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.slideCount;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.shouldInitialize;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SwiperComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLXVzZWZ1bC1zd2lwZXIvIiwic291cmNlcyI6WyJsaWIvc3dpcGVyL3N3aXBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFHTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxNQUF5QixNQUFNLFFBQVEsQ0FBQztBQUUvQztJQW9CRSx5QkFDVSxVQUFzQixFQUN0QixpQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBTnRDLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUNwQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFLN0IsQ0FBQztJQWRKLHNCQUF5Qix1Q0FBVTs7Ozs7UUFBbkMsVUFBb0MsS0FBYztZQUNoRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDM0QsQ0FBQzs7O09BQUE7Ozs7SUFjRCx5Q0FBZTs7O0lBQWY7UUFDRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtJQUNILENBQUM7Ozs7SUFFRCwrQkFBSzs7O0lBQUw7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixtREFBbUQ7WUFDbkQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUM5RCxpQkFBaUIsQ0FDbEIsQ0FBQztnQkFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO2dCQUNGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN4QztZQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7U0FDL0I7SUFDSCxDQUFDOzs7O0lBRUQsNENBQWtCOzs7SUFBbEI7UUFDRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtRQUVELElBQ0UsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUN4RDtZQUNBLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztZQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7Z0JBOURGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLFFBQVE7b0JBQ2xCLHdKQUFzQzs7aUJBRXZDOzs7O2dCQVZDLFVBQVU7Z0JBRlYsaUJBQWlCOzs7eUJBZWhCLEtBQUs7NkJBQ0wsS0FBSyxTQUFDLFlBQVk7O0lBc0RyQixzQkFBQztDQUFBLEFBL0RELElBK0RDO1NBekRZLGVBQWU7OztJQUUxQixpQ0FBK0I7O0lBSy9CLGlDQUFZOzs7OztJQUVaLHdDQUEyQjs7Ozs7SUFDM0IscUNBQXVCOzs7OztJQUN2QixzQ0FBNEI7Ozs7O0lBQzVCLDJDQUFnQzs7Ozs7SUFHOUIscUNBQThCOzs7OztJQUM5Qiw0Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdDaGVja2VkLFxuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBTd2lwZXIsIHsgU3dpcGVyT3B0aW9ucyB9IGZyb20gJ3N3aXBlcic7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3N3aXBlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2lwZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zd2lwZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFN3aXBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQge1xuICAvLyBhZGQgYWxsIHRoZSBvcHRpb25zIGFzIG9wdGlvbmFsIHNldHRpbmdzIGFuZCB1c2UgdGhlbSB0byBjcmVhdGUgYW4gb3B0aW9ucyBvYmplY3RcbiAgQElucHV0KCkgY29uZmlnOiBTd2lwZXJPcHRpb25zO1xuICBASW5wdXQoJ2luaXRpYWxpemUnKSBzZXQgaW5pdGlhbGl6ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSA9IHRoaXMuaW5pdGlhbGl6ZWQgPyBmYWxzZSA6IHZhbHVlO1xuICB9XG5cbiAgc3dpcGVyOiBhbnk7XG5cbiAgcHJpdmF0ZSBzd2lwZXJXcmFwcGVyOiBhbnk7XG4gIHByaXZhdGUgc2xpZGVDb3VudCA9IDA7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzaG91bGRJbml0aWFsaXplID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5zaG91bGRJbml0aWFsaXplKSB7XG4gICAgICB0aGlzLnNldHVwKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0dXAoKSB7XG4gICAgaWYgKCF0aGlzLnN3aXBlcikge1xuICAgICAgLy8gaWYgcmVuZGVyZWQgb24gc2VydmVyIHF1ZXJ5U2VsZWN0b3IgaXMgdW5kZWZpbmVkXG4gICAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnN3aXBlcldyYXBwZXIgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICcuc3dpcGVyLXdyYXBwZXInXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcbiAgICAgICAgdGhpcy5zd2lwZXIgPSBuZXcgU3dpcGVyKFxuICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N3aXBlciA+IGRpdicpLFxuICAgICAgICAgIHRoaXMuY29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSkge1xuICAgICAgdGhpcy5zZXR1cCgpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHRoaXMuc3dpcGVyV3JhcHBlciAmJlxuICAgICAgdGhpcy5zbGlkZUNvdW50ICE9PSB0aGlzLnN3aXBlcldyYXBwZXIuY2hpbGRFbGVtZW50Q291bnRcbiAgICApIHtcbiAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcbiAgICAgIHRoaXMuc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxufVxuIl19